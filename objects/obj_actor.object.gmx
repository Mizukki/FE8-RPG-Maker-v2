<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "idle";

army = BLUE_ARMY;

girdX = 0;
gridY = 0;

name = "error";

class = "Peasant";
race = "Human";

//character stats
level = 1;

//base stats
profMod = 2 + floor(level/5);

strMod = 0;
dexMod = 0;
conMod = 0;
intMod = 0;
wisMod = 0;

//health variables
maxHitPoints = 4 + conMod + ((level -1) * (3 + conMod));
hitPoints = maxHitPoints;

//attack variables
hitBonus = profMod + strMod;
attackType = "melee";
attackTarget = noone;

actionTimer = 0;

//damage variables
damageDice = 4;
damageBonus = strMod;
damageType ="piercing";

//defense variables
armorClass = 10 + dexMod;

//move and actions variables
move = 6;
actions = 2;
canAct = false;

//special action variable
charge = false;
sneakAttack = false;

//spell and action variables
spellHitBonus = 0;
spellSaveDC = 0;

firstLevelSlotMax = 0;
firstLevelSlot = 0;


readiedAction = "error";
targetingType = "error";
actionRange = 0;

//initaite variables
initiative = dexMod;
initRoll = 0;

//variables related to buttons
defaultActions = ds_list_create();
ds_list_add(defaultActions,"end turn");

//variable related to pathing
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);

endPath ="idle";
moveSpeed = 4;

//variables related to buffs/debuffs

//buffs
blessed = 0;

//debuffs
acidBurn = 0;
guidingBolt = false;

//variables related to effects
shake = 0;
shakeMag = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

if (hitPoints &lt;= 0)
{
    map[gridX,gridY].occupant = noone;
    if (obj_control.currentActor = id)
    {
        obj_control.currentActor = noone;
        obj_cursor.selectedActor = noone;
    }
    with(instance_create(x,y,obj_dying))
    {
        sprite_index = other.sprite_index;
    }
    instance_destroy();
}

switch(state)
{
    case "initialize turn":
        if (blessed &gt; obj_control.roundCounter)
        {
            with(instance_create(x,y,obj_bless))
            {
                target = other;
            }
        }
        else
        {
            blessed = 0;
        }
        
        if (acidBurn &gt; 0)
        {
            damage = irandom_range(1,4);
            
            with(instance_create(x+28,y+2,obj_damage_text))
            {
                text = "-" + string(other.damage);
                ground = y;
            }
            hitPoints -= damage;
            acidBurn -= 1;
        }
        
        if (army == BLUE_ARMY)
        {
            scr_movement_range(map[gridX,gridY],move,actions);
            
            switch(attackType)
            {
                case "melee":
                    scr_melee_attack_range(id);
                    break;
                
                case "ranged":
                    scr_ranged_attack_range(id);
                    break;
            }
            obj_cursor.selectedActor = id;
        }
        else
        {
            flash = true;
            alarm[0]=30;
        }
        state = "ready";
        
        break;

    case "begin path":
        //begin moving along path
        path_start(movementPath,moveSpeed,0,true);
        
        state = "moving";
        break;
        
    case "begin attack":
        actionTimer -= 1;
        if (actionTimer &lt;= 0)
        {
            state = "attack";
        }
        break;
        
    case "attack":
        //make attack roll
        attackRoll = irandom_range(1,20);
        
        applySneakAttack = false;
        
        if (sneakAttack)
        {
            tempNode = map[attackTarget.gridX,attackTarget.gridY];
            
            for (i=0;i&lt;ds_list_size(tempNode.neighbors);i+=1)
            {
                current = ds_list_find_value(tempNode.neighbors,i);
                
                if (current.occupant != noone)
                {
                    if (current.occupant.army != attackTarget.army)
                    {
                        applySneakAttack = true;
                    }
                }
            }
        }
        
        attackStatus = scr_attack_roll(id,attackTarget);
        
        tempDamage = 0;
        
        //make damage roll
        if (attackStatus != "miss")
        {
            tempDamage = irandom_range(1, damageDice) + damageBonus;
            
            if (applySneakAttack)
            {
                tempDamage += irandom_range(1,sneakAttackDamage);
            }
            
            if (attackStatus == "crit")
            {
                tempDamage += irandom_range(1, damageDice);
                
                if (applySneakAttack)
                {
                    tempDamage += irandom_range(1,sneakAttackDamage);
                }
            }
        }
        switch(attackType)
        {
            case "ranged":
                attackDir = point_direction(x+8,y+8,attackTarget.x+8,attackTarget.y+8);
                beginX = x+8+lengthdir_x(30,attackDir);
                beginY = y+8+lengthdir_y(30,attackDir);
                
                with(instance_create(beginX,beginY,obj_arrow))
                {
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath,other.beginX,other.beginY,100);
                    
                    if (status != "miss")
                    {
                        path_add_point(movementPath,target.x+8,target.y+8,100);
                    }
                    else
                    {
                        path_add_point(movementPath,target.x+(irandom_range(30,50)*choose(-1,1)),target.y+(irandom_range(30,50)*choose(-1,1)),100);
                    }
                    path_start(movementPath,speed,true,true);
                }
                
                state = "end attack";
                actionTimer = 30;
                
                break;
                
            case "melee":
                if (attackStatus != "miss")
                {
                    for (i=0;i&lt;6;i+=1)
                    {
                        with(instance_create(attackTarget.x+8,attackTarget.y+8,obj_biff))
                        {
                            direction = irandom(360);
                            speed = choose(2,4);
                            scale = choose(2,3);
                            
                            image_speed = 0.5;
                            
                            if (other.attackStatus == "crit")
                            {
                                color = c_yellow;
                            }
                        }
                    }
                    
                    if (attackStatus == "crit")
                    {
                        attackTarget.shake = 8;
                        attackTarget.shakeMag = 8;
                    }
                    else
                    {
                        attackTarget.shake = 4;
                        attackTarget.shakeMag = 4;
                    }
                    
                    attackTarget.hitPoints -= tempDamage;
                    
                    with(instance_create(attackTarget.x+28,attackTarget.y+2,obj_damage_text))
                    {
                        text = "-" + string(other.tempDamage);
                        ground = y;
                        if (other.attackStatus == "crit")
                        {
                            font = fnt_crit;
                        }
                    }
                }
                else
                {
                    with(instance_create(attackTarget.x+28,attackTarget.y+2,obj_damage_text))
                    {
                        text = "miss";
                        ground = y;
                    }
                }
                
                state = "end attack";  
                actionTimer = 10;
                 
                break;
        }
        break;
    
    case "end attack":
        actionTimer -= 1;
        
        if (actionTimer &lt;= 0)
        {
            if (actions &gt; 0)
            {
                obj_cursor.selectedActor = id;
                
                scr_movement_range(map[gridX,gridY],move,actions);
            }
            else
            {
                obj_control.currentActor = noone;
            }
            state = "idle";
        }
        break;
        
    case "begin action":
        scr_wipe_nodes();
        scr_action_targeting(id,targetingType,actionRange);
        
        break;
        
    case "perform action":
        scr_perform_action(id, readiedAction);
        scr_wipe_nodes();
        
        break;
        
    case "end action":
        actionTimer -= 1;
        
        if (actionTimer &lt;= 0)
        {
            state = "idle"
            
            if (actions &gt; 0)
            {
                scr_movement_range(map[gridX,gridY],move,actions);
            }
            else
            {
                state = "idle";
                obj_cursor.selectedActor = noone;
                obj_control.currentActor = noone;
            }
        }
        break;
        
    case "end turn":
        actionTimer -= 1;
        
        if (actionTimer &lt;= 0)
        {
                obj_cursor.selectedActor = noone;
                obj_control.currentActor = noone;
                state = "idle";
        }
        break;
}




















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear path
path_clear_points(movementPath);

if (endPath == "ready")
{
    state = "idle";
    
    if (actions &gt; 0)
    {
        obj_cursor.selectedActor = id;
        scr_movement_range(map[gridX,gridY],move,actions);
        
        if (canAct)
        {
            switch(attackType)
            {
                case "ranged":
                    scr_ranged_attack_range(id);
                    break;
                    
                case "melee":
                    scr_melee_attack_range(id);
                    break;
            }
        }
    }
    else
    {  
        obj_control.currentActor = noone;
    }
}
else
{
    state = endPath;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_cursor.selectedActor == id &amp;&amp; obj_cursor.hoverNode != noone)
{
    tempNode = obj_cursor.hoverNode;
    //if cursor is hovering over a different node than actor's
    if (tempNode.moveNode)
    {
        current = obj_cursor.hoverNode;
        
        //step through every node in the chain, parent to parent, until we reach the actor's node
        while (current.parent != noone)
        {
        //draw a line from the current node to that node's parent
        draw_line_width_colour(current.x+8,current.y+8,current.parent.x+8,current.parent.y+8,4,c_lime,c_lime);
        current = current.parent;
        }
    }
    if (tempNode.attackNode)
    {
        switch(attackType)
        {
            case "ranged":
                draw_line_width_colour(x+8,y+8,tempNode.x+8,tempNode.y+8,4,c_purple,c_purple);
                break;
                
            case "melee":
                tempX = abs(tempNode.gridX - gridX);
                tempY = abs(tempNode.gridY - gridY);
                
                if (tempX &lt;= 1 &amp;&amp; tempY &lt;= 1)
                {
                    draw_line_width_colour(x+8,y+8,tempNode.x+8,tempNode.y+8,4,c_purple,c_purple);
                }
                else
                {
                    current = noone;
                    tempG = 100;
                    
                    for (i=0;i&lt;ds_list_size(tempNode.neighbors);i+=1)
                    {
                        neighbor = ds_list_find_value(tempNode.neighbors,i);
                        
                        if (neighbor.occupant == noone &amp;&amp; neighbor.G &gt; 0 &amp;&amp; neighbor.G &lt; tempG)
                        {
                            tempG = neighbor.G;
                            current = neighbor;
                        }
                    }
                    
                    draw_line_width_colour(tempNode.x+8,tempNode.y+8,current.x+8,current.y+8,4,c_purple,c_purple);
                    
                    while(current.parent != noone)
                    {
                        draw_line_width_colour(current.x+8,current.y+8,current.parent.x+8,current.parent.y+8,4,c_purple,c_purple);
                        current = current.parent;
                    }
                }
                break;
        }
    }
}

if (shake &gt; 0)
{
    draw_sprite_ext(sprite_index,-1,x+irandom_range(-shakeMag,shakeMag),y+irandom_range(-shakeMag,shakeMag),1,1,0,c_white,1);
}
else
{
    draw_self();
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
