<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

if (hitPoints &lt;= 0)
{
    map[gridX,gridY].occupant = noone;
    if (obj_control.currentActor = id)
    {
        obj_control.currentActor = noone;
        obj_cursor.selectedActor = noone;
    }
    with(instance_create(x,y,obj_dying))
    {
        sprite_index = other.sprite_index;
    }
    instance_destroy();
}

switch(state)
{
    case "initialize turn":
        if (blessed &gt; obj_control.roundCounter)
        {
            with(instance_create(x,y,obj_bless))
            {
                target = other;
            }
        }
        else
        {
            blessed = 0;
        }
        
        if (acidBurn &gt; 0)
        {
            damage = irandom_range(1,4);
            
            with(instance_create(x+28,y+2,obj_damage_text))
            {
                text = "-" + string(other.damage);
                ground = y;
            }
            hitPoints -= damage;
            acidBurn -= 1;
        }

        state = "find target";
        
        break;

    case "find target":
        attackTarget = noone;
        node = map[gridX,gridY];
        
        targetList = ds_list_create();
        
        for (i=0;i&lt;ds_list_size(node.neighbors);i+=1)
        {
            neighbor = ds_list_find_value(node.neighbors,i);
            
            if ( neighbor.occupant != noone)
            {
                if (neighbor.occupant.army == BLUE_ARMY)
                {
                    ds_list_add(targetList, neighbor.occupant);
                }
            }
        }
        
        if (ds_list_size(targetList) &gt; 0)
        {
            roll = irandom_range(1,20);
            
            if (roll + intMod &gt; 10)
            {
                healthRatio = 1;
                
                for (i=0;i&lt;ds_list_size(targetList);i+=1)
                {
                    tempTarget = ds_list_find_value(targetList,i);
                    
                    if (tempTarget.hitPoints/tempTarget.maxHitPoints &lt; healthRatio)
                    {
                        attackTarget = tempTarget;
                        healthRatio = tempTarget.hitPoints/tempTarget.maxHitPoints;
                    }
                }
            }
            
            if (attackTarget == noone)
            {
                attackTarget = ds_list_find_value(targetList,irandom_range(0,ds_list_size(targetList)-1));
            }
        }
        
        ds_list_destroy(targetList);
        
        if (attackTarget != noone)
        {
            state = "begin attack";
            actionTimer = 10;
        }
        else
        {
            state = "find move node";
        }
        break;
        
    case "find move node":
        heroList = ds_priority_create();
        
        with(obj_actor)
        {
            if (army == BLUE_ARMY)
            {
                ds_priority_add(other.heroList,id,point_distance(x,y,other.x,other.y));
            }
        }
        closestNode = noone;
        
        while(closestNode = noone)
        {
            targetHero = ds_priority_delete_min(heroList);
            targetNode = map[targetHero.gridX,targetHero.gridY];
            
            for (i=0;i&lt;ds_list_size(targetNode.neighbors);i+=1)
            {
                currentNode = ds_list_find_value(targetNode.neighbors,i);
                
                if (currentNode.occupant == noone &amp;&amp; currentNode.passable)
                {
                    closestNode = currentNode;
                }
            }
            
            if (ds_priority_size(heroList)&lt;=0)
            {
                targetHero = noone;
                flash = true;
                alarm[0] = 30;
                state = "idle";
                break;
            }
        }
        
        ds_priority_destroy(heroList);
        
        if (targetHero != noone)
        {
            scr_ai_movement(map[gridX,gridY],closestNode);
            
            while(closestNode.G &gt; move*actions)
            {
                closestNode = closestNode.parent;
            }
            scr_create_path(id,closestNode);
            
            map[gridX,gridY].occupant = noone;
            gridX = closestNode.gridX;
            gridY = closestNode.gridY;
            
            closestNode.occupant = id;
            state = "begin path";
            
            if (closestNode.G &gt; move)
            {
                actions -= 2;
            }
            else
            {
                actions -= 1;
            }
        }
        
        scr_wipe_nodes();
        
        break;
        
    case "begin path":
        path_start(movementPath,moveSpeed,0,true);
        state = "moving";
        break;
        
    case "begin attack":
        actionTimer -= 1;
        if (actionTimer &lt;= 0)
        {
            state = "attack";
        }
        break;
        
    case "attack":
        //make attack roll
        attackRoll = irandom_range(1,20);
        
        applySneakAttack = false;
        
        if (sneakAttack)
        {
            tempNode = map[attackTarget.gridX,attackTarget.gridY];
            
            for (i=0;i&lt;ds_list_size(tempNode.neighbors);i+=1)
            {
                current = ds_list_find_value(tempNode.neighbors,i);
                
                if (current.occupant != noone)
                {
                    if (current.occupant.army != attackTarget.army)
                    {
                        applySneakAttack = true;
                    }
                }
            }
        }
        
        attackStatus = scr_attack_roll(id,attackTarget);
        
        tempDamage = 0;
        
        //make damage roll
        if (attackStatus != "miss")
        {
            tempDamage = irandom_range(1, damageDice) + damageBonus;
            
            if (applySneakAttack)
            {
                tempDamage += irandom_range(1,sneakAttackDamage);
            }
            
            if (attackStatus == "crit")
            {
                tempDamage += irandom_range(1, damageDice);
                
                if (applySneakAttack)
                {
                    tempDamage += irandom_range(1,sneakAttackDamage);
                }
            }
        }
        switch(attackType)
        {
            case "ranged":
                attackDir = point_direction(x+8,y+8,attackTarget.x+8,attackTarget.y+8);
                beginX = x+8+lengthdir_x(30,attackDir);
                beginY = y+8+lengthdir_y(30,attackDir);
                
                with(instance_create(beginX,beginY,obj_arrow))
                {
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath,other.beginX,other.beginY,100);
                    
                    if (status != "miss")
                    {
                        path_add_point(movementPath,target.x+8,target.y+8,100);
                    }
                    else
                    {
                        path_add_point(movementPath,target.x+(irandom_range(30,50)*choose(-1,1)),target.y+(irandom_range(30,50)*choose(-1,1)),100);
                    }
                    path_start(movementPath,speed,true,true);
                }
                
                state = "end attack";
                actionTimer = 30;
                
                break;
                
            case "melee":
                if (attackStatus != "miss")
                {
                    for (i=0;i&lt;6;i+=1)
                    {
                        with(instance_create(attackTarget.x+8,attackTarget.y+8,obj_biff))
                        {
                            direction = irandom(360);
                            speed = choose(2,4);
                            scale = choose(2,3);
                            
                            image_speed = 0.5;
                            
                            if (other.attackStatus == "crit")
                            {
                                color = c_yellow;
                            }
                        }
                    }
                    
                    if (attackStatus == "crit")
                    {
                        attackTarget.shake = 8;
                        attackTarget.shakeMag = 8;
                    }
                    else
                    {
                        attackTarget.shake = 4;
                        attackTarget.shakeMag = 4;
                    }
                    
                    attackTarget.hitPoints -= tempDamage;
                    
                    with(instance_create(attackTarget.x+28,attackTarget.y+2,obj_damage_text))
                    {
                        text = "-" + string(other.tempDamage);
                        ground = y;
                        if (other.attackStatus == "crit")
                        {
                            font = fnt_crit;
                        }
                    }
                }
                else
                {
                    with(instance_create(attackTarget.x+28,attackTarget.y+2,obj_damage_text))
                    {
                        text = "miss";
                        ground = y;
                    }
                }
                
                state = "end attack";  
                actionTimer = 10;
                 
                break;
        }
        break;
    
    case "end attack":
        actionTimer -= 1;
        
        if (actionTimer &lt;= 0)
        {
            obj_control.currentActor = noone;
            state = "idle";
        }
        break;
}






















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear path
path_clear_points(movementPath);

if (actions &gt; 0)
{
    state = "find target";
}
else
{
    state = "idle";
    obj_control.currentActor = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
