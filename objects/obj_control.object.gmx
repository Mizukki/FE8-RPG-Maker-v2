<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_fade_in);

draw_set_font(fnt_default);

randomize();

state = "initializing";

turnOrder = ds_list_create();

turnCounter = -1;
turnMax = 0;
currentActor = noone;

roundCounter = 0;


globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

//create node
for (x = 0; x &lt; mapWidth; x += 1)
{
    for (y = 0; y &lt; mapHeight; y += 1)
    {
        map[x,y] = instance_create(x * GRID_SIZE, y * GRID_SIZE, obj_node);
        map[x,y].gridX = x;
        map[x,y].gridY = y;
    }
}

//populate neighbor list
for (x = 0; x &lt; mapWidth; x += 1)
{
    for (y = 0; y &lt; mapHeight; y += 1)
    {
        node = map[x,y];
        
        //add left neighbor
        if (x &gt; 0)
        {
            ds_list_add(node.neighbors, map[x - 1,y]);
        }
        //add right neighbor
        if (x &lt; mapWidth - 1)
        {
            ds_list_add(node.neighbors, map[x + 1,y]);
        }
        //add top neighbor
        if (y &gt; 0)
        {
            ds_list_add(node.neighbors, map[x,y - 1]);
        }
        //add bottom neighbor
        if (y &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[x,y + 1]);
        }
        //add top/left neighbor
        if (x &gt; 0 &amp;&amp; y &gt; 0)
        {
            ds_list_add(node.neighbors, map[x - 1,y - 1]);
        }
        //add top/right neighbor
        if (x &lt; mapWidth - 1 &amp;&amp; y &gt; 0)
        {
            ds_list_add(node.neighbors, map[x+1,y - 1]);
        }
        //add bottom/left neighbor
        if (x &gt; 0 &amp;&amp; y &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[x-1,y + 1]);
        }
        //add bottom/right neighbor
        if (x &lt; mapWidth - 1 &amp;&amp; y &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[x+1,y + 1]);
        }
    }
}

instance_create(x,y,obj_cursor);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_delete))
{
    obj_cursor.selectedActor = noone;
    obj_control.currentActor = noone;
    with(obj_actor)
    {
        if (army == BLUE_ARMY)
        {
            instance_destroy();
        }
    }    
    scr_wipe_nodes();
    scr_wipe_buttons();
}

switch(state)
{
    case "initializing":
        with (obj_node)
        {
            if (instance_position(x + 8, y + 8, obj_terrain))
            {
                tempTerrain = instance_position(x+8,y+8,obj_terrain);
                
                switch(tempTerrain.type)
                {
                    case "wall":
                        instance_change(obj_wall, true);
                        type = "wall";
                        passable = false;
                        break;
                }
                with (tempTerrain)
                {
                    instance_destroy()
                }
            }
            if (instance_position(x+8,y+8,obj_actor))
            {
                occupant = instance_position(x+8,y+8,obj_actor);
                occupant.gridX = gridX;
                occupant.gridY = gridY;
            }
            
        }
        state = "roll init";
        break;
    
    case "roll init":
        tempInit = ds_priority_create();
        
        with (obj_actor)
        {
            initRoll = irandom_range(1,20) + initiative;
            ds_priority_add(other.tempInit,id,initRoll);
        }
        while (ds_priority_size(tempInit) &gt; 0)
        {
            ds_list_add(turnOrder, ds_priority_delete_max(tempInit));
        }
        
        turnMax = ds_list_size(turnOrder);
        ds_priority_destroy(tempInit);
        
        state = "waiting";
        
        break;
    
    case "ready":
        if (currentActor == noone)
        {
            redCount = 0;
            blueCount = 0;
            
            with(obj_actor)
            {
                if (army == RED_ARMY)
                {
                    other.redCount += 1;
                }
                if (army == BLUE_ARMY)
                {
                    other.blueCount += 1;
                }
            }
            
            if (redCount &gt; 0 &amp;&amp; blueCount &gt; 0)
            {
        
                turnCounter += 1;
                
                if (turnCounter &gt;= turnMax)
                {
                    turnCounter = 0;
                    roundCounter += 1;
                }
                currentActor = ds_list_find_value(turnOrder, turnCounter);
                
                if (instance_exists(currentActor))
                {
                currentActor.actions = 2;
                currentActor.canAct = true;
                
                currentActor.state = "initialize turn";
                }
                else
                {
                    currentActor = noone;
                }
            }
            else
            {
                if (blueCount &lt;= 0)
                {
                    state = "retry room";
                }
                else
                {
                    state = "next room";
                }
            }
        }
        break;
        
    case "retry room":
        instance_create(0,0,obj_fade_lose);
        state = "waiting";
        break;
        
    case "next room":
        instance_create(0,0,obj_fade_win);
        state = "waiting";
        break;
}


























</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
